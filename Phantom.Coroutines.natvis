<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="Phantom::Coroutines::detail::SingletonStateHandler&lt;void *,*&gt;">
        <DisplayString>{"$T1"} - {&amp;g_objectWithUniqueAddressValue}</DisplayString>
    </Type>
    <Type Name="Phantom::Coroutines::detail::BasicAtomicStateHandlers&lt;*,*,*,*,*,*&gt;">
        <DisplayString></DisplayString>
    </Type>
    <Type Name="Phantom::Coroutines::detail::state&lt;*&gt;">
        <DisplayString>{reinterpret_cast&lt;void*&gt;(reinterpret_cast&lt;uintptr_t&gt;(m_value) &amp; ~c_StateSetIndexPointerMask)}</DisplayString>
    </Type>

    <Type Name="Phantom::Coroutines::detail::single_consumer_event&lt;*&gt;">
        <DisplayString Condition="m_atomicState.m_atomicRepresentation._Storage._Value == &amp;Phantom::Coroutines::detail::UniqueObject&lt;Phantom::Coroutines::detail::single_consumer_event_states::SignalledState&gt;::g_objectWithUniqueAddressValue">Signalled</DisplayString>
        <DisplayString Condition="m_atomicState.m_atomicRepresentation._Storage._Value == &amp;Phantom::Coroutines::detail::UniqueObject&lt;Phantom::Coroutines::detail::single_consumer_event_states::NotSignalledState&gt;::g_objectWithUniqueAddressValue">Not Signalled</DisplayString>
        <DisplayString>Waiting Coroutine: {reinterpret_cast&lt;std::coroutine_handle&lt;void&gt;*&gt;(&amp;m_atomicState.m_atomicRepresentation._Storage._Value)}</DisplayString>
    </Type>

    <!--<Type Name="Phantom::Coroutines::detail::async_mutex::async_mutex_lock_operation">
        <DisplayString>Lock waiter {m_continuation}</DisplayString>
    </Type>-->

    <Type Name="Phantom::Coroutines::detail::basic_async_mutex&lt;*,*,*,*&gt;">
        <!--<DisplayString Condition="m_state.m_atomicRepresentation._Storage._Value == nullptr">Unlocked</DisplayString>
        <DisplayString>Locked</DisplayString>-->

        <Expand>
            <Item Name="Waiters">m_awaiters</Item>
            
            <LinkedListItems>
                <HeadPointer>m_awaiters</HeadPointer>
                <NextPointer>m_next</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>

            <Item Name="Reverse Waiters">m_state</Item>
            
            <LinkedListItems>
                <HeadPointer>static_cast&lt;lock_operation*&gt;(m_state.m_atomicRepresentation._Storage._Value)</HeadPointer>
                <NextPointer>m_next</NextPointer>
                <ValueNode>this->m_continuation</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::sequence_barrier&lt;*&gt;::awaiter">
        <DisplayString>Waiting for {{{m_value}}}: {m_continuation}</DisplayString>
    </Type>

    <Type Name="Phantom::Coroutines::detail::sequence_barrier&lt;*&gt;">
        <DisplayString>Last published {{{m_publishedValue}}}</DisplayString>

        <Expand>

            <Item Name="Queued Waiters">m_queuedAwaiters</Item>

            <TreeItems>
                <HeadPointer>m_queuedAwaiters._Storage._Value</HeadPointer>
                <LeftPointer>m_subtreePointer</LeftPointer>
                <RightPointer>m_siblingPointer</RightPointer>
                <ValueNode>this</ValueNode>
            </TreeItems>

            <Item Name="Coalesced Waiters">m_awaitersHeap</Item>

            <TreeItems>
                <HeadPointer>m_awaitersHeap._Storage._Value</HeadPointer>
                <LeftPointer>m_subtreePointer</LeftPointer>
                <RightPointer>m_siblingPointer</RightPointer>
                <ValueNode>this</ValueNode>
            </TreeItems>

        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::basic_async_auto_reset_event&lt;*,*,*,*&gt;::awaiter">
        <DisplayString>{m_continuation}</DisplayString>
    </Type>
    
    <Type Name="Phantom::Coroutines::detail::basic_async_auto_reset_event&lt;*,*,*,*&gt;">
        <DisplayString Condition="m_state.m_value.m_setCount == 1 &amp;&amp; !m_state.m_value.m_waitingCount">Signalled</DisplayString>
        <DisplayString Condition="m_state.m_value.m_setCount > m_state.m_value.m_waitingCount">Signalled, Dispatching Awaiters</DisplayString>
        <DisplayString Condition="m_state.m_value.m_waitingCount > 0">Not Signalled, Has Awaiters</DisplayString>
        <DisplayString>Not Signalled, No Awaiters</DisplayString>
        
        <Expand>

            <Item Name="Waiters To Signal Next">m_unservicedAwaiters</Item>

            <LinkedListItems Condition="m_unservicedAwaiters != nullptr">
                <HeadPointer>m_unservicedAwaiters</HeadPointer>
                <NextPointer>m_nextAwaiter</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>

            <Item Name="Enqueued Waiters">m_pendingAwaiters._Storage._Value</Item>

            <LinkedListItems>
                <HeadPointer>m_pendingAwaiters._Storage._Value</HeadPointer>
                <NextPointer>m_nextAwaiter</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>
        </Expand>

    </Type>

    <Type Name="Phantom::Coroutines::detail::read_copy_update_section&lt;*&gt;">
        <DisplayString>{m_valueHolderSoftReference->m_value}</DisplayString>
        <Expand>
            <Item Name="current value">
                m_valueHolderSoftReference->m_value
            </Item>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::read_copy_update_section&lt;*&gt;::update_operation">
        <DisplayString>{m_valueHolderSoftReference->m_value}</DisplayString>
        <Expand>
            <Item Name="current value">
                m_valueHolderSoftReference->m_value
            </Item>
            <Item Name="replacement value">
                m_replacementValueHolder._Ptr->m_value
            </Item>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::read_copy_update_section&lt;*&gt;::read_operation">
        <DisplayString>{m_valueHolderSoftReference->m_value}</DisplayString>
        <Expand>
            <Item Name="current value">
                m_valueHolderSoftReference->m_value
            </Item>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::read_copy_update_section&lt;*&gt;::write_operation">
        <DisplayString>{m_valueHolderSoftReference->m_value}</DisplayString>
        <Expand>
            <Item Name="current value">
                m_valueHolderSoftReference->m_value
            </Item>
            <Item Name="replacement value">
                *m_replacementValueHolder._Ptr->m_value
            </Item>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::extended_promise_handle&lt;*&gt;">
        <DisplayString>{m_value}</DisplayString>
        <Expand>
            <Item Name="promise handle">
                m_value
            </Item>
        </Expand>
    </Type>

    <Type Name="Phantom::Coroutines::detail::basic_async_reader_writer_lock&lt;*,*,*,*&gt;">
        <DisplayString Condition="m_state.m_value.m_value.m_readerLockCount &gt; 0">{m_state.m_value.m_value.m_readerLockCount} Readers</DisplayString>
        <DisplayString Condition="m_state.m_value.m_value.m_readerLockCount &lt; 0">Locked For Write</DisplayString>
        <DisplayString>Unlocked</DisplayString>

        <Expand>
            <Item Name="Waiters To Signal Next">""</Item>
            <LinkedListItems>
                <HeadPointer>m_pending</HeadPointer>
                <NextPointer>m_next</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>

            <Item Name="Queued Waiters">""</Item>
            <LinkedListItems>
                <HeadPointer>reinterpret_cast&lt;Phantom::Coroutines::detail::basic_async_reader_writer_lock&lt;$T1,$T2,$T3,$T4&gt;::operation*&gt;(m_state.m_value.m_value.m_queue.m_value &amp; ~0x3)</HeadPointer>
                <NextPointer>m_next</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>
</AutoVisualizer>
