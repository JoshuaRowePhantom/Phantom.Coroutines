cmake_minimum_required (VERSION 3.17)

add_executable(
    Phantom.Coroutines.Test
    "aligned_array_test.cpp"
    "async_atomic_test.cpp"
    "async_auto_reset_event_test.cpp"
    "async_generator_test.cpp"
    "async_latch_test.cpp" 
    "async_manual_reset_event_test.cpp"
    "async_mutex_test.cpp"
    "async_promise_test.cpp" 
    "async_reader_writer_lock_test.cpp" 
    "async_scope_test.cpp"
    "async_sequence_barrier_test.cpp"
    "async_sharded_reader_writer_lock_test.cpp"
    "async_test.cpp"
    "async_test.h"
    "atomic_state_test.cpp"
    "awaiter_list_test.cpp" 
    "contextual_promise_test.cpp" 
    "detail/awaiter_wrapper_test.cpp"   
    "detail/awaiters.h"
    "detail/fibonacci_heap_test.cpp"
    "detail/scope_guard_test.cpp"
    "detail/variant_result_storage_test.cpp"
    "direct_initialized_optional_test.cpp"
    "double_wide_atomic_test.cpp" 
    "early_termination_task_test.cpp"
    "generator_test.cpp"
    "inline_scheduler_test.cpp"
    "make_Task_test.cpp" 
    "manual_scheduler.h"
    "pmr_task.h" 
    "promise_allocator_test.cpp" 
    "read_copy_update_test.cpp"
    "reusable_consecutive_global_id_test.cpp"
    "reusable_task_test.cpp" 
    "sequence_lock_test.cpp" 
    "shared_task_test.cpp"
    "suspend_result_test.cpp" 
    "sync_wait_test.cpp"
    "tagged_pointer_test.cpp"
    "task_test.cpp"
    "thread_local_contextual_promise_test.cpp"
    "thread_pool_scheduler_test.cpp"
    "type_traits_test.cpp" 
)

target_link_libraries(
    Phantom.Coroutines.Test
    PUBLIC
    Phantom.Coroutines
    GTest::gtest
    GTest::gtest_main
)

enable_testing()

gtest_discover_tests(
    Phantom.Coroutines.Test
    EXTRA_ARGS "--gtest_break_on_failure")
